#include <DC_motor_controller.h>
#include <TwoMotors.h>
#include <My_ultrassonic.h>
//#include <LineSensors_Master.h>
#include <Adafruit_VL53L0X.h>


My_ultrassonic ultra(13, 12);
DC_motor_controller motorR;
DC_motor_controller motorL;

TwoMotors both(&motorR, &motorL);

// For the front distance sensor
Adafruit_VL53L0X lox_front = Adafruit_VL53L0X();
////////////////////////////
unsigned long nowTime;
// For millis in obstacle
////////////////////////////
float distance;
///////////////////////////
float front_distance = 0;
float back_distance = 0;
// For the line sensors
int linesensors[] = {A3, A2, A1, A0};
//LineSensors Line(linesensors);

#define start_button A7
#define led A0
////////////////////////////////
float c = -1.0;
float basespeed = 300;
////////////////////////////////

void interruptR () {
  motorR.isr();
}

void interruptL () {
  motorL.isr();
}

void setup () {
  Serial.begin(9600);
  Serial.println("preparing lox");
  if (!lox_front.begin()) {
    while (true);
  }


  Serial.println("lox ready");

  // led for tests
  pinMode(led, OUTPUT);
  digitalWrite(led, LOW);

  //for the line sensors:
  for (int pin_current : linesensors) {
    pinMode(pin_current, INPUT);
  }

  motorR.hBridge(11, 10, 6);
  motorR.setEncoderPin(2, 4);
  motorR.setRR(30);
  motorR.setPIDconstants(2.2, 0.9, 0.3);  //1.9, 0.9, 0.1
  motorR.setPins();
  motorR.walk(0);
  attachInterrupt(digitalPinToInterrupt(2), interruptR, FALLING);

  motorL.hBridge(7, 8, 9);
  motorL.setEncoderPin(3, 5);
  motorL.setRR(30);
  motorL.setPIDconstants(2.2, 0.9, 0.3); //1.9, 0.9, 0.1
  motorL.setPins();
  motorL.walk(0);
  attachInterrupt(digitalPinToInterrupt(3), interruptL, FALLING);

  both.setGyreDegreesRatio(0.45, 90);

  // for back distance sensor
  ultra.setPins();
  // aguardar botão
  pinMode(start_button, INPUT_PULLUP);

  //  while (digitalRead(start_button));
  //  delay(4900);
  c = 1; // 1(sentido horário) -1(sentido anti-horário)
  const byte init_speed = 95;
  const byte init_rotations = 1;
  if (c > 0) {
    motorL.walk(-init_speed, -init_rotations);
  } else {
    motorR.walk(-init_speed, -init_rotations);
  }
  Serial.println("end of setup");

  while (true) {
    pseudoLoop();
  }
}

bool left_line = false;
bool right_line = false;
bool leftBH_line = false;
bool rightBH_line = false;
float ratio = 0.40; // 0.45

void pseudoLoop () {
  if (c > 0) {
    motorL.walk(basespeed * ratio);
    motorR.walk(basespeed);
    //    motorL.walk(basespeed * ratio);
    //    motorR.walk(basespeed);
  } else {
    motorR.walk(basespeed * ratio);
    motorL.walk(basespeed);
    //    motorR.walk(basespeed * ratio);
    //    motorL.walk(basespeed);
  }

  if (enemyFront()) {
    // go ahead
    while (enemyFront()) {
      if (obstacleFront()) {
        if (!digitalRead(linesensors[0]) || (!digitalRead(linesensors[3]))) {
          nowTime = millis();
          while (millis() - nowTime < 1000);
          both.together(-200, -0.3);
          both.stop();
          both.turnDegree(-200, -40);

        }
      } else {
        motorR.run(300);
        motorL.run(300);
      }
    }
    }

  if (backDistance() <= 25) {
    while (backDistance() <= 25) {
      Serial.println(distance);
      Serial.println("WTF");
      debug();
    }
  }


  // branco = 0
  // preto = 1
  left_line = !digitalRead(linesensors[0]);
  right_line = !digitalRead(linesensors[3]);
  leftBH_line = !digitalRead(linesensors[2]);
  rightBH_line = !digitalRead(linesensors[1]);
  // deu linha nos 2 sensores, voltando e girando
  if (left_line || right_line || leftBH_line || rightBH_line) {
    if (left_line && right_line) {
    } else {
      // edge = borda
      // center = centro
      float edge_speed_turn = 170;
      float edge_angle_turn = 10;
      float edge_rot_turn = 0.2;
      //////////////////////////////////
      float center_speed_turn = 170;
      float center_angle_turn = 10;
      float center_rot_turn = 0;
      if (left_line && c < 0) {
        // linha branca do centro sentido anti horário
        both.together(-center_speed_turn, -center_rot_turn);
        both.stop();
        both.turnDegree(center_speed_turn, center_angle_turn);
      } else if (right_line && c < 0) {
        // linha branca da borda sentido anti-horário
        both.together(-edge_speed_turn, -edge_rot_turn);
        both.stop();
        both.turnDegree(-edge_speed_turn, -edge_angle_turn);
      } else if (right_line && c > 0) {
        // linha branca do centro sentido horário
        both.together(-center_speed_turn, -center_rot_turn);
        both.stop();
        both.turnDegree(-center_speed_turn, -center_angle_turn);
      } else if (left_line && c > 0) {
        // linha branca da borda sentido horário
        both.together(-edge_speed_turn, -edge_rot_turn);
        both.stop();
        both.turnDegree(edge_speed_turn, edge_angle_turn);
      }
    }
  }
}


void loop() {

}


bool enemyBehind() {
  return (backDistance() <= 25);
}

bool enemyFront() {
  return (frontDistance() <= 25);
}
bool obstacleFront() {
  return (frontDistance() <= 3);
}

float frontDistance() {
  VL53L0X_RangingMeasurementData_t measure;
  lox_front.rangingTest(&measure, false);
  if (measure.RangeStatus != 4) {
    front_distance = (measure.RangeMilliMeter / 10) - 1;
  } else {
    //Serial.println(" out of range!");
    front_distance = 200; // Max distance (cm)
  }
  return front_distance;
}

float backDistance() {
  distance = ultra.getDistance_cm();
  Serial.println(distance);
  return (distance);
}

void debug() {
  both.stop();
  while (true) {
    delay(1000);
  }
}
